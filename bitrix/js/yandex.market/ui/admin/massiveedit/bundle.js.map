{"version":3,"file":"bundle.js","sources":["src/Grid/Grid.js","src/Grid/UiGrid.js","src/Grid/TableGrid.js","src/MassiveEdit.js","src/Grid/Factory.js"],"sourcesContent":["export class Grid {\n\n\tconstructor(tableId: string) {\n\t\tthis.tableId = tableId;\n\t}\n\n\tgetSelectedIds() : Array<string> {}\n\n\tisForAllChecked() : boolean {}\n\n\treload() : void {}\n\n\tshowError(message: string) : void {}\n}","import {Grid} from \"./Grid\";\n\nexport class UiGrid extends Grid {\n\n\tconstructor(tableId: string) {\n\t\tsuper(tableId);\n\t\tthis.grid = BX.Main.gridManager.getById(tableId).instance;\n\t}\n\n\tgetSelectedIds() : Array {\n\t\treturn this.grid.getRows().getSelectedIds();\n\t}\n\n\tisForAllChecked() : boolean {\n\t\tconst panel = this.grid.getActionsPanel();\n\n\t\tif (panel == null) { return false; }\n\n\t\tconst checkbox = panel.getForAllCheckbox();\n\n\t\tif (checkbox === null) { return false; }\n\n\t\treturn checkbox.checked;\n\t}\n\n\treload() : void {\n\t\tthis.grid.reload();\n\t}\n\n\tshowError(message: string) : void {\n\t\tthis.grid.arParams.MESSAGES = [\n\t\t\t{ TYPE: 'ERROR', TEXT: message }\n\t\t];\n\n\t\tBX.onCustomEvent(window, 'BX.Main.grid:paramsUpdated', []);\n\t}\n}","import {Grid} from \"./Grid\";\n\nexport class TableGrid extends Grid {\n\n\tgetSelectedIds() : Array<string> {\n\t\tconst result = [];\n\t\tconst form = this.adminList().FORM;\n\n\t\tfor (const checkbox of form.querySelectorAll('input[type=\"checkbox\"][name=\"ID[]\"]')) {\n\t\t\tif (checkbox.checked) {\n\t\t\t\tresult.push(checkbox.value);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tisForAllChecked() : boolean {\n\t\tconst actionTarget = this.adminList().ACTION_TARGET;\n\n\t\treturn actionTarget && actionTarget.checked;\n\t}\n\n\treload() : void {\n\t\tconst adminList = this.adminList();\n\t\tconst form = adminList.FORM;\n\n\t\tBX.showWait(form);\n\t\tadminList.GetAdminList(window.location.href, () => {\n\t\t\tBX.closeWait(form);\n\t\t});\n\t}\n\n\tshowError(message: string) : void {\n\t\talert(message);\n\t}\n\n\tadminList() {\n\t\treturn window[this.tableId];\n\t}\n}","import {Factory as GridFactory} from \"./Grid/Factory\";\nimport {Grid} from \"./Grid/Grid\";\n\nexport class MassiveEdit {\n\n\tstatic defaults = {\n\t\turl: null,\n\t\tiblockId: null,\n\t\tprefixSelected: null,\n\t\tlang: {},\n\t};\n\n\tstatic open(tableType: string, tableId: string, options: Object = {}) : void {\n\t\tconst grid = GridFactory.make(tableType, tableId);\n\t\tconst form = new this(grid, options);\n\n\t\tform.show();\n\t}\n\n\tconstructor(grid: Grid, options: Object = {}) {\n\t\tthis.grid = grid;\n\t\tthis.options = Object.assign({}, this.constructor.defaults, options);\n\t}\n\n\tshow() : void {\n\t\ttry {\n\t\t\tconst modal = this.createModal();\n\n\t\t\tmodal.Show();\n\t\t\tthis.bind();\n\t\t} catch (error) {\n\t\t\tthis.grid.showError(error.message);\n\t\t}\n\t}\n\n\tbind() : void {\n\t\tthis.handleModalClose(true);\n\t\tthis.handleActionDone(true);\n\t}\n\n\tunbind() : void {\n\t\tthis.handleActionDone(false);\n\t\tthis.handleModalClose(false);\n\t}\n\n\thandleModalClose(dir: boolean) : void {\n\t\tif (this._modal == null) { return; }\n\n\t\tBX[dir ? 'addCustomEvent' : 'removeCustomEvent'](this._modal, 'onWindowClose', this.onWindowClose);\n\t}\n\n\thandleActionDone(dir: boolean) : void {\n\t\tBX[dir ? 'addCustomEvent' : 'removeCustomEvent']('onYandexMarketMassiveEditDone', this.onActionDone);\n\t}\n\n\tonWindowClose = () => {\n\t\tthis.unbind();\n\t\tthis.releaseModal();\n\t}\n\n\tonActionDone = () => {\n\t\tthis.unbind();\n\t\tthis.closeModal();\n\t\tthis.grid.reload();\n\t}\n\n\treleaseModal(): void {\n\t\tthis._modal = null;\n\t}\n\n\tcloseModal() : void {\n\t\tif (this._modal == null) { return; }\n\n\t\tBX.closeWait();\n\t\tthis._modal.Close();\n\t\tthis._modal = null;\n\t}\n\n\tcreateModal() : BX.CAdminDialog {\n\t\tif (this._modal == null) {\n\t\t\tthis._modal = new BX.CAdminDialog({\n\t\t\t\ttitle: this.options.lang['MODAL_TITLE'],\n\t\t\t\tcontent_url: this.options.url,\n\t\t\t\tcontent_post: {\n\t\t\t\t\tSELECTED: this.selectedRows(),\n\t\t\t\t\tIBLOCK_ID: this.options.iblockId,\n\t\t\t\t},\n\t\t\t\twidth: 720,\n\t\t\t\theight: 800,\n\t\t\t\tresizable: true,\n\t\t\t\tbuttons: [\n\t\t\t\t\tBX.CAdminDialog.btnSave,\n\t\t\t\t\tBX.CAdminDialog.btnCancel,\n\t\t\t\t],\n\t\t\t});\n\t\t}\n\n\t\treturn this._modal;\n\t}\n\n\tselectedRows() : Array {\n\t\tif (this.grid.isForAllChecked()) {\n\t\t\tthrow new Error(this.options.lang['FOR_ALL_NOT_SUPPORTED']);\n\t\t}\n\n\t\tconst selected = this.grid.getSelectedIds();\n\t\tconst prefix = this.options.prefixSelected;\n\n\t\tif (prefix != null) {\n\t\t\treturn selected.map((id) => `${prefix}${id}`);\n\t\t}\n\n\t\treturn selected;\n\t}\n}","import {UiGrid} from \"./UiGrid\";\nimport {TableGrid} from \"./TableGrid\";\nimport type {Grid} from \"./Grid\";\n\nexport class Factory {\n\tstatic make(tableType: string, tableId: string) : Grid {\n\t\tif (tableType === 'Ui') {\n\t\t\treturn new UiGrid(tableId);\n\t\t}\n\n\t\treturn new TableGrid(tableId);\n\t}\n}"],"names":["Grid","constructor","tableId","getSelectedIds","isForAllChecked","reload","showError","message","UiGrid","grid","BX","Main","gridManager","getById","instance","this","getRows","panel","getActionsPanel","checkbox","getForAllCheckbox","checked","arParams","MESSAGES","TYPE","TEXT","onCustomEvent","window","TableGrid","result","form","adminList","FORM","querySelectorAll","push","value","actionTarget","ACTION_TARGET","showWait","GetAdminList","location","href","closeWait","alert","MassiveEdit","tableType","options","make","show","onWindowClose","unbind","releaseModal","onActionDone","closeModal","Object","assign","defaults","createModal","Show","bind","error","handleModalClose","handleActionDone","dir","_modal","Close","CAdminDialog","title","lang","content_url","url","content_post","SELECTED","selectedRows","IBLOCK_ID","iblockId","width","height","resizable","buttons","btnSave","btnCancel","Error","selected","prefix","prefixSelected","map","id"],"mappings":"+IAAO,MAAMA,EAEZC,YAAYC,QACNA,QAAUA,EAGhBC,kBAEAC,mBAEAC,UAEAC,UAAUC,KCVJ,MAAMC,UAAeR,EAE3BC,YAAYC,SACLA,QACDO,KAAOC,GAAGC,KAAKC,YAAYC,QAAQX,GAASY,SAGlDX,wBACQY,KAAKN,KAAKO,UAAUb,iBAG5BC,wBACOa,EAAQF,KAAKN,KAAKS,qBAEX,MAATD,SAAwB,QAEtBE,EAAWF,EAAMG,2BAEN,OAAbD,GAEGA,EAASE,QAGjBhB,cACMI,KAAKJ,SAGXC,UAAUC,QACJE,KAAKa,SAASC,SAAW,CAC7B,CAAEC,KAAM,QAASC,KAAMlB,IAGxBG,GAAGgB,cAAcC,OAAQ,6BAA8B,KChClD,MAAMC,UAAkB5B,EAE9BG,uBACO0B,EAAS,GACTC,EAAOf,KAAKgB,YAAYC,SAEzB,MAAMb,KAAYW,EAAKG,iBAAiB,uCACxCd,EAASE,SACZQ,EAAOK,KAAKf,EAASgB,cAIhBN,EAGRzB,wBACOgC,EAAerB,KAAKgB,YAAYM,qBAE/BD,GAAgBA,EAAaf,QAGrChB,eACO0B,EAAYhB,KAAKgB,YACjBD,EAAOC,EAAUC,KAEvBtB,GAAG4B,SAASR,GACZC,EAAUQ,aAAaZ,OAAOa,SAASC,MAAM,KAC5C/B,GAAGgC,UAAUZ,MAIfxB,UAAUC,GACToC,MAAMpC,GAGPwB,mBACQJ,OAAOZ,KAAKb,gBCnCR0C,cASAC,EAAmB3C,EAAiB4C,EAAkB,UAC3DrC,oBCRKoC,EAAmB3C,SACZ,OAAd2C,EACI,IAAIrC,EAAON,GAGZ,IAAI0B,EAAU1B,KDGI6C,KAAKF,EAAW3C,GAC5B,IAAIa,KAAKN,EAAMqC,GAEvBE,OAGN/C,YAAYQ,EAAYqC,EAAkB,SAoC1CG,cAAgB,UACVC,cACAC,qBAGNC,aAAe,UACTF,cACAG,kBACA5C,KAAKJ,eA3CLI,KAAOA,OACPqC,QAAUQ,OAAOC,OAAO,GAAIxC,KAAKd,YAAYuD,SAAUV,GAG7DE,WAEgBjC,KAAK0C,cAEbC,YACDC,OACJ,MAAOC,QACHnD,KAAKH,UAAUsD,EAAMrD,UAI5BoD,YACME,kBAAiB,QACjBC,kBAAiB,GAGvBZ,cACMY,kBAAiB,QACjBD,kBAAiB,GAGvBA,iBAAiBE,GACG,MAAfhD,KAAKiD,QAETtD,GAAGqD,EAAM,iBAAmB,qBAAqBhD,KAAKiD,OAAQ,gBAAiBjD,KAAKkC,eAGrFa,iBAAiBC,GAChBrD,GAAGqD,EAAM,iBAAmB,qBAAqB,gCAAiChD,KAAKqC,cAcxFD,oBACMa,OAAS,KAGfX,aACoB,MAAftC,KAAKiD,SAETtD,GAAGgC,iBACEsB,OAAOC,aACPD,OAAS,MAGfP,qBACoB,MAAf1C,KAAKiD,cACHA,OAAS,IAAItD,GAAGwD,aAAa,CACjCC,MAAOpD,KAAK+B,QAAQsB,KAAb,YACPC,YAAatD,KAAK+B,QAAQwB,IAC1BC,aAAc,CACbC,SAAUzD,KAAK0D,eACfC,UAAW3D,KAAK+B,QAAQ6B,UAEzBC,MAAO,IACPC,OAAQ,IACRC,WAAW,EACXC,QAAS,CACRrE,GAAGwD,aAAac,QAChBtE,GAAGwD,aAAae,cAKZlE,KAAKiD,OAGbS,kBACK1D,KAAKN,KAAKL,wBACP,IAAI8E,MAAMnE,KAAK+B,QAAQsB,KAAb,6BAGXe,EAAWpE,KAAKN,KAAKN,iBACrBiF,EAASrE,KAAK+B,QAAQuC,sBAEd,MAAVD,EACID,EAASG,KAAKC,GAAQ,GAAEH,IAASG,MAGlCJ,GA7GIvC,EAELY,SAAW,CACjBc,IAAK,KACLK,SAAU,KACVU,eAAgB,KAChBjB,KAAM"}